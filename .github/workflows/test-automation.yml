name: Google Test Automation CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore GoogleAPITests/GoogleAPITests.csproj
      
    - name: Build API Tests
      run: dotnet build GoogleAPITests/GoogleAPITests.csproj --no-restore --configuration Release
      
    - name: Run API Tests
      run: |
        dotnet test GoogleAPITests/GoogleAPITests.csproj \
          --no-build \
          --configuration Release \
          --logger "trx;LogFileName=api-test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage"
      
    - name: Upload API Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: |
          **/TestResults/**/*.trx
          **/TestResults/**/*.xml

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore GoogleUITests/GoogleUITests.csproj
      
    - name: Build UI Tests
      run: dotnet build GoogleUITests/GoogleUITests.csproj --no-restore --configuration Release
      
    - name: Install Playwright
      run: |
        dotnet tool install --global Microsoft.Playwright.CLI
        playwright install chromium
        
    - name: Run UI Tests
      env:
        HEADLESS: true
      run: |
        dotnet test GoogleUITests/GoogleUITests.csproj \
          --no-build \
          --configuration Release \
          --logger "trx;LogFileName=ui-test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage"
      
    - name: Upload UI Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-results
        path: |
          **/TestResults/**/*.trx
          **/TestResults/**/*.xml
          
    - name: Upload Screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-screenshots
        path: screenshots/
        
    - name: Upload Videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-videos
        path: videos/

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests]
    if: always()
    
    steps:
    - name: Download API Test Results
      uses: actions/download-artifact@v4
      with:
        name: api-test-results
        path: api-results/
        
    - name: Download UI Test Results
      uses: actions/download-artifact@v4
      with:
        name: ui-test-results
        path: ui-results/
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: '**/*.trx'
        reporter: dotnet-trx
        fail-on-error: true
        
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.api-tests.result == 'success' && needs.ui-tests.result == 'success'
      run: |
        echo "✅ All Google tests passed successfully!"
        echo "API Tests: ${{ needs.api-tests.result }}"
        echo "UI Tests: ${{ needs.ui-tests.result }}"
        
    - name: Notify Failure
      if: needs.api-tests.result == 'failure' || needs.ui-tests.result == 'failure'
      run: |
        echo "❌ Some Google tests failed!"
        echo "API Tests: ${{ needs.api-tests.result }}"
        echo "UI Tests: ${{ needs.ui-tests.result }}"
        exit 1